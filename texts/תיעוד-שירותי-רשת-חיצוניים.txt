# תיעוד שימוש בשירותי רשת חיצוניים - פרויקט Caly

## סקירה כללית

פרויקט Caly הוא אפליקציית לוח שנה חכמה הבנויה עם Next.js שמשתמשת במספר שירותי רשת חיצוניים כדי לספק פונקציונליות מתקדמת למשתמשים.

---

## 1. Google Services - שירותי גוגל

### 1.1 Google Calendar API

**מיקום בקוד:** `app/api/google-calendar/`

**תיאור השירות:**

- אינטגרציה עם Google Calendar API לקריאת ועדכון אירועי יומן
- OAuth 2.0 authentication לאימות בטוח מול שירותי גוגל

**איפה בשימוש:**

- `app/api/google-calendar/auth/route.js` - תהליך האימות
- `app/api/google-calendar/callback/route.js` - קליטת callback מגוגל
- `app/api/google-calendar/events/route.js` - קריאת אירועים מגוגל

**מה הצורך בשירות:**

- אפשרות לסנכרן אירועים קיימים מלוח השנה של גוגל
- קריאה בלבד (readonly) לאירועים
- שמירת קשר עם הלוח השנה הראשי של המשתמש

**הגדרות נדרשות:**

```javascript
GOOGLE_CLIENT_ID;
GOOGLE_CLIENT_SECRET;
GOOGLE_REDIRECT_URI;
```

### 1.2 Google Generative AI (Gemini)

**מיקום בקוד:** `app/api/analyze-event/route.js`

**תיאור השירות:**

- שימוש ב-Gemini AI לניתוח טקסט ויצירת אירועי יומן באופן אוטומטי
- מודל: `gemini-2.0-flash`

**איפה בשימוש:**

- פענוח הוראות בשפה טבעית ליצירת אירועים
- ניתוח זמנים, תאריכים ותוכן האירוע

**מה הצורך בשירות:**

- המרת טקסט חופשי לאירועי יומן מובנים
- חכמת בינה מלאכותית לפרסור תאריכים וזמנים
- שיפור חוויית המשתמש - יצירת אירועים בשפה טבעית

**הגדרה נדרשת:**

```javascript
GEMINI_API_KEY;
```

---

## 2. Firebase - פלטפורמת Google

### 2.1 Firebase Authentication

**מיקום בקוד:** `lib/firebase.js`, `context/AuthContext.jsx`

**תיאור השירות:**

- שירות אימות משתמשים עם תמיכה במספר שיטות כניסה
- ניהול הרשאות ומצב המשתמש

**איפה בשימוש:**

- אימות בכניסה והרשמה
- ניהול מצב המשתמש באפליקציה
- שמירת מידע המשתמש

**מה הצורך בשירות:**

- אבטחת המערכת ואימות משתמשים
- ניהול הרשאות גישה לתוכן
- ממשק פשוט לניהול אימות

### 2.2 Firebase Firestore

**מיקום בקוד:** `lib/firebase.js`, כל הקומפוננטים

**תיאור השירות:**

- מסד נתונים NoSQL מבוזר בענן
- אחסון כל נתוני האפליקציה

**איפה בשימוש:**

- `users` - מידע המשתמשים
- `calendars` - לוחות שנה
- `events` - אירועים
- `colorCodes` - קודי צבע מותאמים אישית
- `feedback` - משוב מהמשתמשים
- `feedbackComments` - תגובות על המשוב

**מה הצורך בשירות:**

- אחסון מתמשך של נתונים
- סנכרון בזמן אמת בין מכשירים
- קלות בניהול מסד נתונים ללא שרת

**הגדרות נדרשות:**

```javascript
NEXT_PUBLIC_FIREBASE_API_KEY;
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN;
NEXT_PUBLIC_FIREBASE_PROJECT_ID;
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET;
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID;
NEXT_PUBLIC_FIREBASE_APP_ID;
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID;
```

---

## 3. LemonSqueezy - פלטפורמת תשלומים

**מיקום בקוד:** `lib/lemonsqueezy.js`, `app/api/lemonsqueezy/`

**תיאור השירות:**

- פלטפורמת תשלומים ומנויים דיגיטלית
- ניהול מוצרים דיגיטליים ותשלומים

**איפה בשימוש:**

- `app/api/lemonsqueezy/create-checkout/route.js` - יצירת עמוד תשלום
- `app/api/lemonsqueezy/create-portal/route.js` - פורטל ניהול מנויים
- `app/api/webhook/lemonsqueezy/route.js` - קליטת webhook events

**מה הצורך בשירות:**

- מונטיזציה של האפליקציה
- ניהול מנויים ותוכניות תשלום
- אבטחת עסקאות תשלום
- פורטל לניהול מנויים עבור הלקוחות

**הגדרות נדרשות:**

```javascript
LEMONSQUEEZY_API_KEY;
LEMONSQUEEZY_STORE_ID;
LEMONSQUEEZY_SIGNING_SECRET;
```

**תהליך עבודה:**

1. יצירת checkout session
2. הפניית משתמש לעמוד תשלום
3. קליטת webhook עם פרטי העסקה
4. עדכון הרשאות המשתמש במערכת

---

## 4. Vercel Analytics & Speed Insights

**מיקום בקוד:** `package.json` (dependencies)

**תיאור השירות:**

- כלי ניתוח ביצועים ושימוש באפליקציה
- מדידת מהירות טעינה וחוויית משתמש

**מה הצורך בשירות:**

- מעקב אחרי ביצועי האפליקציה
- אופטימיזציה של חוויית המשתמש
- איסוף נתונים על דפוסי שימוש

---

## 5. OpenAI (רזרבי)

**מיקום בקוד:** `package.json` (dependency)

**תיאור השירות:**

- חלופה ל-Gemini לעיבוד שפה טבעית
- כרגע לא בשימוש פעיל

**מה הצורך בשירות:**

- גיבוי למקרה של בעיות עם Gemini
- אפשרות עתידית לשיפור יכולות ה-AI

---

## סיכום הארכיטקטורה

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Next.js API    │    │  External APIs  │
│   (React)       │◄──►│   Routes         │◄──►│                 │
└─────────────────┘    └──────────────────┘    │ • Google APIs   │
                                                │ • Firebase      │
                                                │ • LemonSqueezy  │
                                                │ • Vercel        │
                                                └─────────────────┘
```

כל השירותים החיצוניים מתממשקים דרך API routes של Next.js, מה שמאפשר:

- **אבטחה**: מפתחות API נשמרים בצד השרת
- **ביצועים**: קישור ישיר לשירותים מהשרת
- **גמישות**: אפשרות להחליף שירותים בקלות
- **ניהול שגיאות**: טיפול מרכזי בשגיאות

## הערות אבטחה

1. **משתני סביבה**: כל המפתחות נשמרים כ-environment variables
2. **Webhooks**: אימות חתימה ב-LemonSqueezy webhooks
3. **OAuth**: הגנה על הרשאות גישה ל-Google APIs
4. **Firebase Rules**: הגנה על מסד הנתונים ברמת הרשאות המשתמש
